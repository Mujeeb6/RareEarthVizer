import random

class Entity:
    def __init__(self, name, skill_level, entry_fee):
        self.name = name
        self.skill_level = skill_level
        self.entry_fee = entry_fee
        self.state = "waiting"  # Default state for champions

    def __str__(self):
        return f"Entity{{name='{self.name}', skill_level={self.skill_level}, entry_fee={self.entry_fee}, state='{self.state}'}}"

class Champion(Entity):
    def __init__(self, name, type, skill_level, entry_fee):
        super().__init__(name, skill_level, entry_fee)
        self.type = type

    def __str__(self):
        return f"Champion{{name='{self.name}', type='{self.type}', skill_level={self.skill_level}, entry_fee={self.entry_fee}, state='{self.state}'}}"

class Challenge:
    def __init__(self, challenge_number, challenge_type, enemy, skill_required, reward):
        self.challenge_number = challenge_number
        self.challenge_type = challenge_type
        self.enemy = enemy
        self.skill_required = skill_required
        self.reward = reward

    def __str__(self):
        return f"Challenge{{challenge_number={self.challenge_number}, challenge_type='{self.challenge_type}', enemy='{self.enemy}', skill_required={self.skill_required}, reward={self.reward}}}"

class Tournament:
    def __init__(self, name):
        self.name = name
        self.champions_reserve = []
        self.champions_team = []
        self.challenges = []
        self.treasury = 1000  # Initial treasury value

    def add_champion_to_team(self, champion_name):
        for champion in self.champions_reserve:
            if champion.name == champion_name:
                if champion.state == "waiting" and self.treasury >= champion.entry_fee:
                    self.treasury -= champion.entry_fee
                    champion.state = "entered"
                    self.champions_team.append(champion)
                    print(f"{champion.name} has been added to your team.")
                elif champion.state == "entered":
                    print(f"{champion.name} is already in your team.")
                else:
                    print(f"Not enough funds to add {champion.name} to your team.")
                return
        print("Champion not found or unavailable.")

    def retire_champion(self, champion_name):
        for champion in self.champions_team:
            if champion.name == champion_name:
                if champion.state == "entered":
                    champion.state = "waiting"
                    self.treasury += champion.entry_fee // 2
                    self.champions_team.remove(champion)
                    print(f"{champion.name} has been retired from your team.")
                else:
                    print(f"{champion.name} cannot be retired.")
                return
        print("Champion not found in your team.")

    def meet_challenge(self, challenge_number):
        challenge_exists = False
        for challenge in self.challenges:
            if challenge.challenge_number == challenge_number:
                challenge_exists = True
                for champion in self.champions_team:
                    if self.can_challenge(champion, challenge_number):
                        enemy_skill_level = random.randint(1, 10)
                        reward = random.randint(100, 500)
                        if champion.skill_level >= enemy_skill_level:
                            self.treasury += reward
                            print(f"Challenge won by {champion.name}. Reward: {reward} gulden")
                        else:
                            if self.treasury >= reward:
                                self.treasury -= reward
                                champion.state = "disqualified"
                                print(f"Challenge lost on skill level. Deducted {reward} gulden from treasury.")
                            else:
                                self.treasury -= reward
                                print("Challenge is lost and Rare Earth completely defeated.")
                                return
                        return
                print("No suitable champion available.")
                break
        if not challenge_exists:
            print("No such challenge.")

    def display_state(self):
        print(f"Vizier: {self.name}")
        print(f"Treasury: {self.treasury} gulden")
        print("Champions in Reserve:")
        for champion in self.champions_reserve:
            print(f"{champion} - State: {champion.state}")
        print("Champions in Team:")
        for champion in self.champions_team:
            print(f"{champion} - State: {champion.state}")
        print("Available Challenges:")
        for challenge in self.challenges:
            print(challenge)

    def load_sample_data(self):
        self.champions_reserve.append(Champion("Ganfrank", "Wizard", 7, 400))
        self.champions_reserve.append(Champion("Rudolf", "Wizard", 6, 400))
        self.champions_reserve.append(Champion("Elblond", "Warrior", 1, 150))
        self.champions_reserve.append(Champion("Flimsi", "Warrior", 2, 200))
        self.champions_reserve.append(Champion("Drabina", "Dragon", 7, 500))
        self.champions_reserve.append(Champion("Golum", "Dragon", 7, 500))
        self.champions_reserve.append(Champion("Argon", "Warrior", 9, 900))
        self.champions_reserve.append(Champion("Neon", "Wizard", 2, 300))
        self.champions_reserve.append(Champion("Xenon", "Dragon", 7, 500))
        self.champions_reserve.append(Champion("Atlanta", "Warrior", 5, 500))
        self.champions_reserve.append(Champion("Krypton", "Wizard", 8, 300))
        self.champions_reserve.append(Champion("Hedwig", "Wizard", 1, 400))

        self.challenges.append(Challenge(1, "Magic", "Borg", 3, 100))
        self.challenges.append(Challenge(2, "Fight", "Huns", 3, 120))
        self.challenges.append(Challenge(3, "Mystery", "Ferengi", 3, 150))
        self.challenges.append(Challenge(4, "Magic", "Vandal", 9, 200))
        self.challenges.append(Challenge(5, "Mystery", "Borg", 7, 90))
        self.challenges.append(Challenge(6, "Fight", "Goth", 8, 45))
        self.challenges.append(Challenge(7, "Magic", "Frank", 10, 200))
        self.challenges.append(Challenge(8, "Fight", "Sith", 10, 170))
        self.challenges.append(Challenge(9, "Mystery", "Cardashian", 9, 300))
        self.challenges.append(Challenge(10, "Fight", "Jute", 2, 300))
        self.challenges.append(Challenge(11, "Magic", "Celt", 2, 250))
        self.challenges.append(Challenge(12, "Mystery", "Celt", 1, 250))
        self.challenges.append(Challenge(13, "Magic", "Spuds", 1, 100))

    def can_challenge(self, champion, challenge_number):
        for challenge in self.challenges:
            if challenge.challenge_number == challenge_number:
                if (challenge.challenge_type == "Magic" and champion.type == "Wizard") or \
                   (challenge.challenge_type == "Fight" and (champion.type == "Warrior" or champion.type == "Dragon")) or \
                   (challenge.challenge_type == "Mystery" and (champion.type == "Wizard" or champion.type == "Dragon")):
                    return True
                break
        return False

def main():
    print("Welcome to Rare Earth Tournament Management System!")
    vizier_name = input("Enter your name as Vizier: ")
    vizier = Tournament(vizier_name)
    vizier.load_sample_data()

    while True:
        print("\nChoose an action:")
        print("1. Add champion to team")
        print("2. Retire champion")
        print("3. Meet challenge")
        print("4. Display game state")
        print("5. Quit")
        choice = input("Enter your choice: ")

        if choice == "1":
            champion_to_add = input("Enter the name of the champion to add to your team: ")
            vizier.add_champion_to_team(champion_to_add)
        elif choice == "2":
            champion_to_retire = input("Enter the name of the champion to retire: ")
            vizier.retire_champion(champion_to_retire)
        elif choice == "3":
            challenge_number = int(input("Enter the challenge number: "))
            vizier.meet_challenge(challenge_number)
        elif choice == "4":
            vizier.display_state()
        elif choice == "5":
            print("Exiting the game. Goodbye!")
            break
        else:
            print("Invalid choice. Please enter a number from 1 to 5.")

if __name__ == "__main__":
    main()
